#!/usr/bin/env ruby

require 'squish'
require 'basicrdf'
require 'lib/scutter'
require 'webrick'
include WEBrick

# rdfweb_server, sample RDF services (RSS directory etc)
# $Id: rdfweb_server,v 1.10 2003-01-29 03:28:19 danbri Exp $
#
# Copyright 2001 Dan Brickley 
#
# 
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA





# Notes:
#
# We can run this here and make it appear on the main server, eg:
# ssh -v pldab@rdfweb.org -g -R 8080:127.0.0.1:2000      
#

# Webrick servlet gives an erb/erb1 error 
# so I commented some lines out, see:
# /usr/local/lib/ruby/site_ruby/1.6/webrick/httpservlet.rb 
# or webrick archives for details.

class RSSViewServlet < HTTPServlet::AbstractServlet

  def do_GET(req, res)

    query=<<EOQ;

	SELECT ?i, ?t, ?d,  
 	 WHERE 
	 (rss::title ?i ?t)
	 (rdf::type ?i rss::item)
	USING
	 rdf for http://www.w3.org/1999/02/22-rdf-syntax-ns#
	 rss for http://purl.org/rss/1.0/ 

EOQ

#	 (rss::description ?i ?d)
     
    x = '<?xml version="1.0" encoding="UTF-8"?>'
    x +=  "\n"
    x += '<html xmlns="http://www.w3.org/1999/xhtml">'
    x += "<head><title>RDFWeb: RSS Channel</title>\n\n"
    x += "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /></head> <body>\n"
  
    ## we load some RDF from the Web

    loaded = false
    base = './'
    u = req.query['u'] 
    u = 'http://www.ilrt.bristol.ac.uk/discovery/rdf/resources/rss.rdf' if !u

    x += "<h1>RSS feed: #{u}</h1>\n\n"

    opts={}

    src_id = fetch_and_cache u #, '.', true, opts 		# grab files, stash locally 
    puts "got srcid: #{src_id}" 	# basis for file name 
    cache_id = "#{base}webcache/_nt/rdf-#{src_id}.nt"
    puts "got cache_id: #{cache_id}" 	
    begin  
      graph = load_graph_from_cache src_id # load rdf from cached file
      graph.reg_xmlns 'http://purl.org/rss/1.0/', 'rss'
      loaded = true	
    rescue
      puts "Error loading rdf document: "+$!
    end

    if loaded
      begin  

        q = SquishQuery.new.parseFromText(query)
        resultset = SquishQuery.ask q, graph
        x += "query: #{query} q: #{q} "
        x += "<ul>\n\n"
        x += "<h1>Recent items</h1>\n"

        chan_node = Node.getResource u, graph	# hook up node to its datasource
        image = chan_node.rss_image.to_s 
	x += "<img src=\"#{image}\" alt=\"channel logo\" />" if image != ""

        resultset.each do |chan|

          title = esc_utf8 chan.values['t']
          item = esc_utf8 chan.values['i']

          item_node = Node.getResource item, graph	# hook up node to its datasource
          description = esc_utf8 item_node.rss_description.to_s

          x += "<li><a href=\"#{item}\">#{title}</a> <em>#{description}</em></li>\n"
        end
        x += "</ul>\n\n"
      rescue
        x += "Query error"
        puts "Error during squish query"
      end
    else 
      x += "No channel loaded."
      puts "Load failed."
    end
    puts "Closing RSS doc."
    x += "</body>\n</html>\n\n" 
    res['Content-Type'] = "text/html; charset=utf-8"
    res.body=x
  end

end


# A basic Annotea Annotation
#
class SimpleAnnotation

  attr_accessor :target, :context, :creator_name, :created, :date, :body_uri, :annotype, :body
  def toRDF

    xml=<<XML;
	<r:RDF xmlns:r="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	       xmlns:a="http://www.w3.org/2000/10/annotation-ns#"
	       xmlns:d="http://purl.org/dc/elements/1.1/">
	 <r:Description about="http://www.example.org/Annotation/3ACF6D754">
	  <r:type resource="http://www.w3.org/2000/10/annotation-ns#Annotation"/>
	  <r:type resource="http://www.w3.org/2000/10/annotationType#{@annotype}"/>
	  <a:annotates r:resource="#{@target}"/>
	  <a:context r:resource='#{@context}'/>
	  <d:creator>#{@creator_name}</d:creator>
	  <a:created>#{@created}</a:created>
	  <d:date>#{@date}</d:date>
	  <a:body r:resource="#{@body_uri}"/>
	 </r:Description>
	</r:RDF>
XML

    return xml 
  end


  def SimpleAnnotation.list_annotations(target)
  puts "Looking up annotations on #{target}"
  raise("List annotation needs URI") if !target

  q = <<EOQ;

	SELECT ?a, ?creator_name, ?context,  ?created, ?date, ?body,
 	 WHERE 
	 (a::body ?a ?body)
	 (a::annotates ?a #{target})
	 (a::context ?a ?context)
	 (a::created ?a ?created)
	 (dc::date ?a ?date)
         (dc::creator ?a ?creator_name)
	USING 
	 dc for http://purl.org/dc/elements/1.1/
	 a for http://www.w3.org/2000/10/annotation-ns#
	 rdf for http://www.w3.org/1999/02/22-rdf-syntax-ns#
EOQ

    query = SquishQuery.new.parseFromText q
    annolist=[]
    DBI.connect('DBI:Pg:rdfweb1','danbri','') do | dbh |
      dbh.select_all query.toSQLQuery   do |annordf|
        annolist.push ResultRow.new annordf
      end
    end
  return annolist

  end
  # Annotation: ["Dan Brickley", 
  # "http://fireball.danbri.org/people/danbri/2002/08/annotea/test1.rdf", "http://fireball.danbri.org/people/danbri/2002/08/annotea/body1.html", "2002-08-04T12:10Z", "http://www.w3.org/Collaboration/", "2002-08-04T12:10Z", "http://www.w3.org/Collaboration/"]

end


class AnnoteaServlet < HTTPServlet::AbstractServlet
    require_path_info false

  def do_GET(req, res)


    myAnn = SimpleAnnotation.new
    
#    myAnn.target='http://www.w3.org/Collaboration/'
#    myAnn.context=myAnn.target
#    myAnn.creator_name='Ralph Swick' 
#    myAnn.created='1999-10-14T12:10Z'
#    myAnn.date='1999-10-14T12:10Z'
#    myAnn.body_uri='http://www.example.com/mycomment.html'

    res['Content-Type'] = "text/plain"
#    res['Content-Type'] = "application/xml+rdf"
    res.body = myAnn.toRDF
    t = req.query['w3c_annotates']
    annotations = SimpleAnnotation.list_annotations(t)
    annodata = "annotations: \n"

    # SELECT ?a, ?creator_name, ?context,  ?created, ?date, ?body,
    annotations.each do |a| 
      annodata += "annotation: #{a.inspect}\n " 
      myAnn = SimpleAnnotation.new
      myAnn.creator_name = a.creator_name
      myAnn.context = a.context
      myAnn.body = a.body
      myAnn.created = a.created
      myAnn.date = a.date
      myAnn.target = a.a
      
      res.body += myAnn.toRDF

    end  

    res.body += annodata
    res.body += "\n[end]\n"

	#    res.body += "querying rdf for: #{a}\n"
	#    res.body += "Annotea request: \n#{req.inspect}"

  end

end


class RSSDirectoryServlet < HTTPServlet::AbstractServlet

  def do_GET(req, res)
    require 'dbi'
    query=<<EOQ;

	SELECT ?uri, ?title, ?desc,  
	WHERE (rdf::type ?uri rss::channel)
	(rss::title ?uri ?title)
	(rss::description ?uri ?desc)
	USING 
	rdf for http://www.w3.org/1999/02/22-rdf-syntax-ns#
	rss for http://purl.org/rss/1.0/
	foaf for http://xmlns.com/foaf/0.1/  
	dc for http://purl.org/dc/elements/1.1/
EOQ


    dbi_driver = 'DBI:Pg:rdfweb1' # think about config...
    dbi_user = 'danbri'
    dbi_pass =''
    q = SquishQuery.new.parseFromText (query)
    h= '<?xml version="1.0" encoding="UTF-8"?>'
    h += "\n" 
    h += '<html xmlns="http://www.w3.org/1999/xhtml">'
    h +=  "<head><title>RDFWeb: RSS Channel Directory</title>\n\n"
    h += "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />  </head><body>\n"
    h += "<h1>RSS 1.0 Channels:</h1>\n\n"
    h +=  "<ul>\n\n"
    DBI.connect(  dbi_driver, dbi_user ,  dbi_pass ) do | dbh |
      dbh.select_all( q.toSQLQuery  ) do | c |
        channel=ResultRow.new c
	esc_utf8 channel.desc
        esc_utf8 channel.title
        h += "<li><a href=\"../rssview/?u=#{channel.uri}\">#{channel.title}</a> <em>#{channel.desc}</em></li>";
      end
    end
    h += "</ul>"
    h += "\n\n</body>\n</html>\n\n"
    res['Content-Type'] = "text/html; charset=utf-8"
    res.body=h
  end
end


s = HTTPServer.new( :Port => 2000, 
	:Logger => WEBrick::Log::new('logfile', WEBrick::Log::DEBUG), :BindAddress    => '0.0.0.0' 

	)
#	, :BindAddress    => '0.0.0.0' 

s.mount  '/rss', RSSDirectoryServlet
s.mount  '/rssview', RSSViewServlet
s.mount  '/anno', AnnoteaServlet
	
trap("INT"){ s.shutdown }
s.start

