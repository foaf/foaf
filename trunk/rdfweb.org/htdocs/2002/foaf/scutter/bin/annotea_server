#!/usr/bin/env ruby

# A basic annotation server
# $Id: annotea_server,v 1.1 2002-08-05 06:08:34 danbri Exp $
#
# author: dan brickley <danbri@w3.org>
#
# This implements the basic lookup functionality of an Annotea server.
# It does note provide annotation-posting facilities. Instead, the
# working assumption is that an aggregate of annotations data has been 
# harvested from online sources. This greatly simplifies the cost of 
# implementing an Annotea server.
#
# see also:
# http://www.w3.org/2001/Annotea/
# http://annozilla.mozdev.org/
#
# Status / todo:
#  - basics have been tested in Annozilla, and seem to work.
#  - haven't tested multiple annotations for a single document
#  - caching would be very useful
#  - should test with non-HTML bodies
#
# Dependencies:
#  - RubyRDF libraries
#  - webrick 

# License: we need Webrick. Webrick is GPL.
# ...so this should presumably be GPL. 
# ...and packaged separately from rubyrdf?


require 'squish'
require 'basicrdf'
require 'scutter'

require 'webrick'
include WEBrick


# A basic Annotea Annotation
#
class SimpleAnnotation

  attr_accessor :target, :context, :creator_name, :created, :date, :body_uri, :annotype, :body
  def toRDF

    xml=<<XML;
	<r:RDF xmlns:r="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	       xmlns:a="http://www.w3.org/2000/10/annotation-ns#"
	       xmlns:d="http://purl.org/dc/elements/1.1/">
	 <r:Description about="http://www.example.org/Annotation/3ACF6D754">
	  <r:type resource="http://www.w3.org/2000/10/annotation-ns#Annotation"/>
	  <r:type resource="http://www.w3.org/2000/10/annotationType#{@annotype}"/>
	  <a:annotates r:resource="#{@target}"/>
	  <a:context r:resource='#{@context}'/>
	  <d:creator>#{@creator_name}</d:creator>
	  <a:created>#{@created}</a:created>
	  <d:date>#{@date}</d:date>
	  <a:body r:resource="#{@body}"/>
	 </r:Description>
	</r:RDF>
XML

    return xml 
  end


  def SimpleAnnotation.list_annotations(target)
  puts "[annoruby] Looking up annotations on #{target}\n"
  raise("List annotation needs URI") if !target

  q = <<EOQ;

	SELECT ?a, ?creator_name, ?context,  ?created, ?date, ?body,
 	 WHERE 
	 (a::annotates ?a #{target})
         (dc::creator ?a ?creator_name)
	 (a::context ?a ?context)
	 (a::created ?a ?created)
	 (dc::date ?a ?date)
	 (a::body ?a ?body)
	USING 
	 dc for http://purl.org/dc/elements/1.1/
	 a for http://www.w3.org/2000/10/annotation-ns#
	 rdf for http://www.w3.org/1999/02/22-rdf-syntax-ns#
EOQ

    puts "[annoruby] query: #{q}"
    query = SquishQuery.new.parseFromText q
    annolist=[]
    DBI.connect('DBI:Pg:rdfweb1','danbri','') do | dbh |
      dbh.select_all query.toSQLQuery   do |annordf|
        annolist.push ResultRow.new annordf
        puts "[annoruby] debug: #{annordf.inspect}"
      end
    end
  puts "[annoruby] search results: #{annolist.size}\n"
  return annolist

  end
  # Annotation: ["Dan Brickley", 
  # "http://fireball.danbri.org/people/danbri/2002/08/annotea/test1.rdf", "http://fireball.danbri.org/people/danbri/2002/08/annotea/body1.html", "2002-08-04T12:10Z", "http://www.w3.org/Collaboration/", "2002-08-04T12:10Z", "http://www.w3.org/Collaboration/"]

end


class AnnoteaServlet < HTTPServlet::AbstractServlet
    require_path_info false

  def do_GET(req, res)


    myAnn = SimpleAnnotation.new
    
	#    myAnn.target='http://www.w3.org/Collaboration/'
	#    myAnn.context=myAnn.target
	#    myAnn.creator_name='Ralph Swick' 
	#    myAnn.created='1999-10-14T12:10Z'
	#    myAnn.date='1999-10-14T12:10Z'
	#    myAnn.body_uri='http://www.example.com/mycomment.html'

    res['Content-Type'] = "text/plain"
    # res['Content-Type'] = "application/xml+rdf"
    t = req.query['w3c_annotates']
    annotations = SimpleAnnotation.list_annotations(t)
    # SELECT ?a, ?creator_name, ?context,  ?created, ?date, ?body,
    annodata=''
    annotations.each do |a| 
      myAnn = SimpleAnnotation.new

      myAnn.creator_name = a.creator_name
      myAnn.context = a.context
      myAnn.body = a.body
      myAnn.created = a.created
      myAnn.date = a.date
      myAnn.target = a.a
        
      res.body += myAnn.toRDF
    end  
    res.body += annodata

  end

end


s = HTTPServer.new( :Port => 2000, :Logger => WEBrick::Log::new('logfile', WEBrick::Log::DEBUG) )
s.mount  '/anno', AnnoteaServlet
trap("INT"){ s.shutdown }
s.start

