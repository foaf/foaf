<job id="Robot">
<script language=jscript>
rdfsNS="http://www.w3.org/2000/01/rdf-schema#"
wotNS="http://xmlns.com/wot/0.1/"
var hex_chr = "0123456789abcdef";

HOMEDIR="e:\\htdocs\\foaf\\scutter\\"

count=0

re=/\\u([0-9A-F][0-9A-F][0-9A-F][0-9A-F])/gim

RS=new ActiveXObject("ADODB.Recordset")
RC=new ActiveXObject("ADODB.Command")
FSO=new ActiveXObject("Scripting.FileSystemObject");
wush=new ActiveXObject("WScript.Shell")

RC.ActiveConnection="rdfold"
RC.CommandType=1


 try {
  Reset=WScript.Arguments.Item(0)=='Reset'
	} catch (e) {
  Reset=false
	}

 try {
  starturl=WScript.Arguments.Item(1)
	} catch (e) {
  starturl="http://jibbering.com/plan.rdf"
	}

if (Reset) {
 sqlstr="delete from urlsnew"
 RC.CommandText=sqlstr
 RC.Execute()
 sqlstr="delete from provenance"
 RC.CommandText=sqlstr
 RC.Execute()
 sqlstr="delete from rdf3"
 RC.CommandText=sqlstr
 RC.Execute()
}
sqlstr="REPLACE INTO urlsnew (url) VALUES('"+starturl+"')"
RC.CommandText=sqlstr
RC.Execute()

notFinished=true
d=new Date().valueOf()
while (notFinished) {
 getPhase()
 WScript.Sleep(250)
 rdfPhase() 
 var sqlstr="SELECT count(url) FROM urlsnew WHERE status=0"
	try { RS.Close() } catch (e) {}
 RS.Open(sqlstr,"rdfold")
 if (RS.Fields(0).Value==0) notFinished=false
}
sqlstr="alter table rdf3 drop primary key"
RC.CommandText=sqlstr
RC.Execute()
WScript.Echo('smush mbox @'+Math.floor((new Date().valueOf()-d)/1000))
smushMbox()
WScript.Echo('sha1 @'+Math.floor((new Date().valueOf()-d)/1000))
sha1()
WScript.Echo('smush mboxsha1 @'+Math.floor((new Date().valueOf()-d)/1000))
smushMboxsha1()
WScript.Echo('provenance @'+Math.floor((new Date().valueOf()-d)/1000))
source()
WScript.Echo('remove duplicates @'+Math.floor((new Date().valueOf()-d)/1000))
removeDups()
WScript.Echo('end @'+Math.floor((new Date().valueOf()-d)/1000))

function removeDups() {
  sqlstr="delete from rdf3B"
  RC.CommandText=sqlstr
  RC.Execute()
		sqlstr='insert into rdf3B select obj,"http://jibbering.com/foaf/jim.rdf#isKnownBy",subj,type,source from rdf3 where pred="http://xmlns.com/foaf/0.1/knows"'
  RC.CommandText=sqlstr
  RC.Execute()
		sqlstr='insert into rdf3 select * from rdf3B'
  RC.CommandText=sqlstr
  RC.Execute()
 try {
  sqlstr="alter ignore table rdf3 add primary key (subj(120),pred(120),obj(120),source)"
  RC.CommandText=sqlstr
  RC.Execute()
	} catch (e) {}
}


function getPhase() {
 var sqlstr="SELECT url FROM urlsnew WHERE status=0"
	try { RS.Close() } catch (e) {}
 RS.Open(sqlstr,"rdfold")
	if (!RS.EOF) {
  var Arr=RS.GetRows().toArray()
  FAl=Arr.length ;
		for (i=0;i<FAl;i++) {
   if (Arr[i]+''!=null) {
    WScript.Echo("get - "+Arr[i])
    checkURL(Arr[i])
    WScript.Sleep(200) 
			}
		}
 } 
}

function rdfPhase() {
 var sqlstr="SELECT url,localcache,ref FROM urlsnew WHERE status=1"
	try { RS.Close() } catch (e) {}
 RS.Open(sqlstr,"rdfold")
	if (!RS.EOF) {
  var Arr=RS.GetRows().toArray()
  FAl=Arr.length ;
		for (var i=0;i<FAl/3;i++) {
  try {
   WScript.Echo("rdf - "+Arr[0])
   var oExec = wush.Exec("rdfdump -w -o ntriples -q file:"+HOMEDIR+"\\cache\\"+Arr[1]+".rdf "+Arr[0].replace(/\&/gim,"\\&"));
   output=''
   err=''
			execCount=0
   while (oExec.Status==0 && execCount<44){
				execCount++
    WScript.Sleep(100);
    output+=oExec.StdOut.ReadAll()
    err+=oExec.StdErr.ReadAll()
				if (execCount==20) {
					oExec.Terminate()
				}
   }
   str=output.split(' .\n') 
   try {
    sqlstr="update urlsnew set error='"+err+"' where localcache='"+Arr[1]+"'"
    RC.CommandText=sqlstr
    RC.Execute()
   } catch (e) {}
  var tris=parseNT(str,Arr[1])
 WScript.Echo("rdf - "+tris.length+" found")
		for (var j=0;j<tris.length;j++) {
   sqlstr="insert into rdf3 VALUES('"+tris[j].subject.replace(re,conv).replace(/'/g,"\\'")+"','"+tris[j].predicate.replace(re,conv)+"','"+tris[j].object.replace(re,conv).replace(/'/g,"\\'")+"',"+(tris[j].type=='literal' ? 1 : 0)+",'"+Arr[2]+"')";//"
   try {
    RC.CommandText=sqlstr
    RC.Execute()
   } catch (e) {	}
		}
  seeAlso=Match(tris,null,rdfsNS+"seeAlso",null)
		for (var k=0;k<seeAlso.length;k++) {
			if (seeAlso[k].object && +seeAlso[k].object.indexOf('http://')==0) {
    if (seeAlso[k].object.indexOf('irc.open')==-1 && seeAlso[k].object.indexOf('irc.werken')==-1 && seeAlso[k].object.indexOf('irclogs')==-1 && seeAlso[k].object.indexOf('london.pm.org')==-1 && seeAlso[k].object.indexOf('chat.rdf')==-1) {
     sqlstr="SELECT status FROM urlsnew where url='"+seeAlso[k].object+"'"
    	try { RS.Close() } catch (e) {}
     RS.Open(sqlstr,"rdfold")
  			if (RS.EOF) {
      if (seeAlso[k].object.indexOf('#')!=-1) seeAlso[k].object=seeAlso[k].object.substr(0,seeAlso[k].object.indexOf('#'))
      sqlstr="REPLACE INTO urlsnew (url) VALUES('"+seeAlso[k].object+"')"
      RC.CommandText=sqlstr
      RC.Execute()
     }
 			}
 		}
		}
		partstr=''
  Assurance=Match(tris,null,wotNS+"assurance",null)
		for (var k=0;k<Assurance.length;k++) {
			if (Assurance[k].subject==Arr[0]) {
				var oExec = wush.Exec("wget -qb -t 1 -O "+HOMEDIR+"\\cache\\"+Arr[1]+".asc -U foafnaut+scutter -nv "+Assurance[k].object);
				output=''
				err=''
				while (oExec.Status==0){
     WScript.Sleep(1500);
     output+=oExec.StdOut.ReadAll()
     err+=oExec.StdErr.ReadAll()
		  }
				var oExec = wush.Exec("gpg --verify "+HOMEDIR+"\\cache\\"+Arr[1]+".asc "+HOMEDIR+"\\cache\\"+Arr[1]+".rdf")
				output=''
				err=''
				while (oExec.Status==0){
     WScript.Sleep(500);
     output+=oExec.StdOut.ReadAll()
     err+=oExec.StdErr.ReadAll()
		  }
				if (err.match(/.* public key not found/gim)) {
     err.match(/.* key ID (.*)/gim)
   		wush.Exec("gpg --keyserver pgp.mit.edu --recv-keys "+RegExp.$1)
 				output=''
 				err=''
 				while (oExec.Status==0){
      WScript.Sleep(500);
      output+=oExec.StdOut.ReadAll()
      err+=oExec.StdErr.ReadAll()
 		  }
					var oExec = wush.Exec("gpg --verify "+HOMEDIR+"\\cache\\"+Arr[1]+".asc "+HOMEDIR+"\\cache\\"+Arr[1]+".rdf")
					output=''
  			err=''
		 		while (oExec.Status==0){
      WScript.Sleep(500);
      output+=oExec.StdOut.ReadAll()
      err+=oExec.StdErr.ReadAll()
		   }
		 	}
				err.match(/gpg: (.*) signature from (.*)/gim)
				if (RegExp.$1=="Good") {
     partstr=", assurance='"+RegExp.$2+"'"
 			} else {
	 			sqlstr='UPDATE urlsnew SET error=concat(error,"\nBad Signature.") where localcache="'+Arr[1]+'"'
		 		RC.CommandText=sqlstr
		 		RC.Execute()
		 	}
			}
		}
  sqlstr="UPDATE urlsnew SET status=2, triples="+tris.length+partstr+" where localcache='"+Arr[1]+"'"
  RC.CommandText=sqlstr
  RC.Execute()
  } catch (e) {}
  Arr.splice(0,3)
		}
	}
}
function checkURL(url) {
 robotOK=checkRobots(url)
 if (robotOK) {
		fname="R"+new Date().valueOf()
  var oExec = wush.Exec("wget  -qb -t 1 --header \"Accept: application/rdf+xml;q=1,*/*;q=0.2\" -T 15 -O "+HOMEDIR+"\\cache\\"+fname+".rdf -U foafnaut+scutter -nv "+url);
  output=''
		err=''
  while (oExec.Status==0){
   WScript.Sleep(1500);
   output+=oExec.StdOut.ReadAll()
   err+=oExec.StdErr.ReadAll()
		}
	 if (err.indexOf('ERROR')==-1) {
			sqlstr="UPDATE urlsnew SET localcache='"+fname+"', status=1 where url='"+url+"'"
			RC.CommandText=sqlstr
 		RC.Execute()
	 } else {
   sqlstr="UPDATE urlsnew SET status=100, error='"+err+"' where url='"+url+"'"
   RC.CommandText=sqlstr
   RC.Execute()
  }
 } else {
  sqlstr="UPDATE urlsnew SET status=99, error='URL is in exclusion list.' where url='"+url+"'"
  RC.CommandText=sqlstr
  RC.Execute()
 }
}
function checkRobots(url) {
 // no robots check
	if (url.indexOf('/ilrt-rdf/iris/records')!=-1) return false
	if (url.indexOf('triplestore.aktors')!=-1) return false
	if (url.indexOf('www.stanford.edu')!=-1) return false
 if (url && url.indexOf('http://')!=0) return false
  else {
  var sqlstr="SELECT ok FROM robots WHERE domain='"+url+"'"
		try { RS.Close() } catch (e) {}
  RS.Open(sqlstr,"rdfold")
 	if (!RS.EOF) {
   if (RS.Fields(0)+0==-1) return true
    else return false
  }
 }
 return true
}

function Triple(subject,predicate,object,type) {
 this.subject=subject
 this.predicate=predicate
 this.object=object
 this.type=type
 return this
}
 function parseNT(str,b) {
  inTriples=[]
		for (var i=0;i<str.length;i++) {
   var tris=str[i].split(' ')
			if (tris.length>2) {
    var subj=tris[0]
				if (subj.indexOf('<')!=-1) {
     subj=subj.split('<')[1].split('>')[0]
     if (tris[0].charAt(tris[0].length-1)!='>') tris.splice(1,1)
				} else {
     subj=subj+'_'+b
				}
    var pred=tris[1]
    pred=pred.split('<')[1].split('>')[0]
    obj=str[i].substr(str[i].indexOf(pred+'> ')+pred.length+2,str[i].length)
 			if (obj.indexOf('<')==0) {
     obj=obj.split('<')[1].split('>')[0]
     inTriples.push(new Triple(subj,pred,obj,"resource"))
 			} else {
     if (obj.indexOf('"')==0) {
      obj=obj.split('"')[1].split('"')[0]
					} else {
      obj=obj+'_'+b  
					}
     inTriples.push(new Triple(subj,pred,obj,"literal"))
 			}
			}
		}
  return inTriples
 }
 function Match(triples,s,p,o) {
  outTriples=new Array()
  for (var i=0;i<triples.length;i++) {
   match=true
   if (!(s==null || triples[i].subject==s)) match=false
   if (!(p==null || triples[i].predicate==p)) match=false
   if (!(o==null || triples[i].object==o)) match=false
   if (match) outTriples.push(triples[i])
  }
  return outTriples
 }

	function sha1() {
  RS=new ActiveXObject("ADODB.Recordset")
  RS1=new ActiveXObject("ADODB.Recordset")
  RC=new ActiveXObject("ADODB.Command")
  FSO=new ActiveXObject("Scripting.FileSystemObject");
  WuSH=new ActiveXObject("WScript.Shell")

  RC.ActiveConnection="rdfold"
  RC.CommandType=1

  sqlstr='select distinct subj,obj,source from rdf3 where pred="http://xmlns.com/foaf/0.1/mbox" and obj like "mailto:%@%"'
  RS.Open(sqlstr,"rdfold")
  if (!RS.EOF) {
   var Arr=RS.GetRows().toArray()
   FAl=Arr.length/3
  	for (i=0;i<FAl;i++) {
    sqlstr='insert into rdf3 values("'+Arr[0]+'","http://xmlns.com/foaf/0.1/mbox_sha1sum","'+calcSHA1(Arr[1])+'",1,"'+Arr[2]+'")'
    try {
     RC.CommandText=sqlstr
     RC.Execute()
		  } catch (e) {}
    Arr.splice(0,3)
  	}
  }
 }
 function smushMbox() {
  count=0
  RS=new ActiveXObject("ADODB.Recordset")
  RS1=new ActiveXObject("ADODB.Recordset")
  RC=new ActiveXObject("ADODB.Command")
  FSO=new ActiveXObject("Scripting.FileSystemObject");
  WuSH=new ActiveXObject("WScript.Shell")
  
  RC.ActiveConnection="rdfold"
  RC.CommandType=1
  Smush=new Array()
  
  sqlstr='select distinct subj,obj,count(*) as b from rdf3 where pred="http://xmlns.com/foaf/0.1/mbox" group by obj order by b desc'
  RS.Open(sqlstr,"rdfold")
  if (!RS.EOF) {
   var Arr=RS.GetRows().toArray()
   FAl=Arr.length/3
  	for (i=0;i<FAl;i++) {
  		if (Arr[2]>1){
     sqlstr='select subj from rdf3 where pred="http://xmlns.com/foaf/0.1/mbox" and obj="'+Arr[1]+'"'
  			try { RS1.Close() } catch (e) {}
     RS1.Open(sqlstr,"rdfold")
  			if (!RS1.EOF) {
      if (!Smush[Arr[0]]) Smush[Arr[0]]=new Array()
      var Arr2=RS1.GetRows().toArray()
      FAl2=Arr2.length
  				for (j=0;j<FAl2;j++) {
       Smush[Arr[0]][Smush[Arr[0]].length]=Arr2[j]
  				}
  			}
  		}
    Arr.splice(0,3)
   }
  }
  for (i in Smush) {
   arrl=Smush[i]
   for (j=0;j<arrl.length;j++) {
    sqlstr='update rdf3 set subj="'+i+'" where subj="'+arrl[j]+'"'
    RC.CommandText=sqlstr
    RC.Execute()
    sqlstr='update rdf3 set obj="'+i+'" where obj="'+arrl[j]+'" and pred!="http://xmlns.com/foaf/0.1/mbox"'
    RC.CommandText=sqlstr
    RC.Execute()
  	}
  }
	}
 function smushMboxsha1() {
  count=0
  RS=new ActiveXObject("ADODB.Recordset")
  RS1=new ActiveXObject("ADODB.Recordset")
  RC=new ActiveXObject("ADODB.Command")
  FSO=new ActiveXObject("Scripting.FileSystemObject");
  WuSH=new ActiveXObject("WScript.Shell")
  
  RC.ActiveConnection="rdfold"
  RC.CommandType=1
  Smush=new Array()

  try {RS.Close() } catch (e) {}
  sqlstr='select distinct subj,obj,count(*) as b from rdf3 where pred="http://xmlns.com/foaf/0.1/mbox_sha1sum" group by obj order by b desc'
  RS.Open(sqlstr,"rdfold")
  if (!RS.EOF) {
   var Arr=RS.GetRows().toArray()
   FAl=Arr.length/3
  	for (i=0;i<FAl;i++) {
  		if (Arr[2]>1){
     sqlstr='select subj from rdf3 where pred="http://xmlns.com/foaf/0.1/mbox_sha1sum" and obj="'+Arr[1]+'"'
  			try { RS1.Close() } catch (e) {}
     RS1.Open(sqlstr,"rdfold")
  			if (!RS1.EOF) {
      if (!Smush[Arr[0]]) Smush[Arr[0]]=new Array()
      var Arr2=RS1.GetRows().toArray()
      FAl2=Arr2.length
  				for (j=0;j<FAl2;j++) {
       Smush[Arr[0]][Smush[Arr[0]].length]=Arr2[j]
  				}
  			}
  		}
    Arr.splice(0,3)
   }
  }
  for (i in Smush) {
   arrl=Smush[i]
   for (j=0;j<arrl.length;j++) {
    sqlstr='update rdf3 set subj="'+i+'" where subj="'+arrl[j]+'"'
    RC.CommandText=sqlstr
    RC.Execute()
    sqlstr='update rdf3 set obj="'+i+'" where obj="'+arrl[j]+'" and pred!="http://xmlns.com/foaf/0.1/mbox_sha1sum"'
    RC.CommandText=sqlstr
    RC.Execute()
  	}
  }
	}

 function source() {
  RS=new ActiveXObject("ADODB.Recordset")
  RS1=new ActiveXObject("ADODB.Recordset")
  RC=new ActiveXObject("ADODB.Command")
  FSO=new ActiveXObject("Scripting.FileSystemObject");
  WuSH=new ActiveXObject("WScript.Shell")
  
  RC.ActiveConnection="rdfold"
  RC.CommandType=1
  sqlstr='select count(*),max(id) from provenance'
  RS.Open(sqlstr,"rdfold")
  if (RS.Fields(0).value!=0) count=+(RS.Fields(1).value)+1
   else count=10000

try { RS.Close() } catch (e) {}  
  sqlstr='select subj,pred,obj from rdf3 where source<10000 group by (concat(subj,pred,obj))'
  RS.Open(sqlstr,"rdfold")
  if (!RS.EOF) {
   var Arr=RS.GetRows().toArray()
   FAl=Arr.length/3
  	for (i=0;i<FAl;i++) {
				try { RS1.Close() } catch (e) {}
    Arr[0]=Arr[0].replace(/"/g,'\\"');//'
    Arr[1]=Arr[1].replace(/"/g,'\\"');//'
   try {
    Arr[2]=Arr[2].replace(/"/g,'\\"');//'
			} catch (e) {}
    sqlstr='select source from rdf3 where subj="'+Arr[0]+'" and pred="'+Arr[1]+'" and obj="'+Arr[2]+'" and source>9999 limit 1'
				try {
     RS1.Open(sqlstr,"rdfold")
				 if (!RS1.EOF) {
				 	mycount=RS1.Fields(0).Value
				 } else {
      mycount=count++
				 }
				} catch (e) {
     mycount=count++
				}
				try {
					sqlstr='insert delayed into provenance (id,txt) SELECT '+mycount+',source from rdf3 where subj="'+Arr[0]+'" and pred="'+Arr[1]+'" and obj="'+Arr[2]+'" and source<10000'
  			RC.CommandText=sqlstr
     RC.Execute()
     sqlstr='update rdf3 set source="'+mycount+'" where subj="'+Arr[0]+'" and pred="'+Arr[1]+'" and obj="'+Arr[2]+'"'
  			RC.CommandText=sqlstr
     RC.Execute()
 				Arr.splice(0,3)
 			} catch (e) {}
   }
  }
	}

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Copyright (C) Paul Johnston 2000 - 2002.
 * See http://pajhome.org.uk/site/legal.html for details.
 */

/*
 * Convert a 32-bit number to a hex string with ms-byte first
 */
function hex(num)
{
  var str = "";
  for(var j = 7; j >= 0; j--)
    str += hex_chr.charAt((num >> (j * 4)) & 0x0F);
  return str;
}

/*
 * Convert a string to a sequence of 16-word blocks, stored as an array.
 * Append padding bits and the length, as described in the SHA1 standard.
 */
function str2blks_SHA1(str)
{
  var nblk = ((str.length + 8) >> 6) + 1;
  var blks = new Array(nblk * 16);
  for(var i = 0; i < nblk * 16; i++) blks[i] = 0;
  for(var i = 0; i < str.length; i++)
    blks[i >> 2] |= str.charCodeAt(i) << (24 - (i % 4) * 8);
  blks[i >> 2] |= 0x80 << (24 - (i % 4) * 8);
  blks[nblk * 16 - 1] = str.length * 8;
  return blks;
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left
 */
function rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

/*
 * Perform the appropriate triplet combination function for the current
 * iteration
 */
function ft(t, b, c, d)
{
  if(t < 20) return (b & c) | ((~b) & d);
  if(t < 40) return b ^ c ^ d;
  if(t < 60) return (b & c) | (b & d) | (c & d);
  return b ^ c ^ d;
}

/*
 * Determine the appropriate additive constant for the current iteration
 */
function kt(t)
{
  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
         (t < 60) ? -1894007588 : -899497514;
}

/*
 * Take a string and return the hex representation of its SHA-1.
 */
function calcSHA1(str)
{
  var x = str2blks_SHA1(str);
  var w = new Array(80);

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;
  var e = -1009589776;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    var olde = e;

    for(var j = 0; j < 80; j++)
    {
      if(j < 16) w[j] = x[i + j];
      else w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);
      var t = safe_add(safe_add(rol(a, 5), ft(j, b, c, d)), safe_add(safe_add(e, w[j]), kt(j)));
      e = d;
      d = c;
      c = rol(b, 30);
      b = a;
      a = t;
    }

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
    e = safe_add(e, olde);
  }
  return hex(a) + hex(b) + hex(c) + hex(d) + hex(e);
}





function conv(a,b) {
 return "&#x"+b+";"
}
</script>
</job>
